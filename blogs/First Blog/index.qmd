---
title: "Intro to EDA in RStudio"
author: "Gregory Ehlinger"
date: "2023-11-17"
image: "rstudio.png"
    
---

## Exploratory Data Analysis in RStudio

Here I will describe the basics of performing EDA in RStudio.





To began Exploratory Data Analysis (EDA) in RStudio, we first must load in our dataset. RStudio comes equipped with several datasets; so to describe the EDA process in RStudio, I have decided to use the "mtcars" dataset. The "mtcars" dataset pulls information from the 1970 Motor Trend US magazine about various characteristics from car models of the time. Some packages that are helpful with the EDA process include "dplyr", "ggplot2", and "tidyr".

```{r}

# Deleting the "#" symbol and running the code will install the package automatically.

#install.packages("dplyr")
#install.packages("ggplot2")
#install.packages("tidyr")

library(dplyr)
library(ggplot2)
library(tidyr)

data("mtcars")

```

To install the mentioned packages and load the "mtcars" dataset follow the code above; however, 

Now to start exploring, it is good to look at the structure and the variables of the dataset 

```{r}

# Will print out the column names, our variables, of the dataset
colnames(mtcars)

# Will print out the structure of the data
str(mtcars)

# Will print out the summary statistics of the variables of the dataset
summary(mtcars)


```
To get a better visualization of the distribution of the data, we can create several different plots. For this application, box plots are great! They visualize the summary statistics listed in the code block above.

```{r}

# Creates box plots for each variable in our dataset
par(mfrow = c(2, 6), mar = c(1, 1, 2, 1))

for (i in 1:ncol(mtcars)) {
  boxplot(mtcars[, i], main = names(mtcars)[i], col = "green", border = "black") 
}

```
Now that we know the name of our variables, an overview of the dataset, and distribution of the dataset, we can explore the relationship among the variables.

To find correlations/relationships, we must make sure that our dataset does not have any missing values.

```{r}

# Will print the number of missing values in the dataset
sum(is.na(mtcars))

```
In this dataset, we do not have any missing values which means we will be able to proceed without any additional steps. However, if the dataset was missing values, then data cleaning would be necessary. To handle missing values, excluding or imputing records with missing values would be necessary. 

To create a correlation matrix, installing the "corrplot" package would be beneficial. 

```{r}


# Visualize the correlation matrix
#install.packages("corrplot") <- remove the "#" symbol to have RStudio automatically install the "corrplot" package

library(corrplot)

correlation_matrix <- cor(mtcars)

# Creates the correlation matrix with numerical values for the variables

correlation_matrix <- cor(mtcars)

# Prints our correlation matrix
print(correlation_matrix)



```

An alternative way to look at the correlation matrix is by adding color.

```{r}
# Creates the correlation matrix but changes the numerical value of the correlation with a color
# Red indicates a negative correlation
# Blue indicates a positive correlation

corrplot(correlation_matrix, method = "color")

```
To expand upon the correlations between variables, if we wanted to focus on a single variable, like a target variable. For this example, I will be using "mpg" as the target variable. 

```{r}

# Find the variables with the highest absolute correlation with mpg
mpg_correlation <- correlation_matrix["mpg", ]
abs_correlation <- abs(mpg_correlation)

# Sort in descending order
sorted_correlation <- sort(abs_correlation, decreasing = TRUE)

# Print the variables and their absolute correlation with mpg
print(sorted_correlation)

```
As we can see, weight has the highest absolute correlation to mpg. 

```{r}

# Create a scatterplot between weight and mpg
plot(mtcars$wt, mtcars$mpg, 
     main = "Scatterplot of Weight vs. MPG",
     xlab = "Weight",
     ylab = "Miles per Gallon",
     col = "green",
     pch= 19) #stylizes the data points on the graph

# Adds the regression line which would in
abline(lm(mpg ~ wt, data = mtcars), col = "black", lwd = 2)

```
To find the equation for the black regression line in the scatterplot, use the code below.

```{r}

# Fit a linear regression model
lm_model <- lm(mpg ~ wt, data = mtcars)

# Print the regression formula
print(summary(lm_model))

```

Based on the correlation taken from the matrix of -0.8676594 and this graph, we can see that there is a strong negative relationship between the two variables weight and mpg. 

Additional EDA can be performed on this dataset but this should serve as a basic introduction on how to conduct EDA in RStudio.



