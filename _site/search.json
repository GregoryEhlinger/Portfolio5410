[
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Gregory Ehlinger",
    "section": "",
    "text": "Download Resume"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Gregory Ehlinger",
    "section": "",
    "text": "Gregory Ehlinger is currently persuing my Masters of Science in Advanced Data Analytics at the University of North Texas. He completed his Bachelors of Science in Industrial Distribution from Texas A&M University. For the past 6 years, he has been working as an Operations Associate and Inside Sales for a plumbing wholesaler serving the North Texas Region.\nCompetent in handling cost analysis, quality documentation, process improvement & implementation, procurement, upstream & downstream communication, and direct interaction with customers & vendors.\nProficient in Tableau, Eclipse, RStudio, Python, Eclipse, and Microsoft Office.\n \n  \n   \n  \n    \n     Email\n  \n  \n    \n     GitHub\n  \n  \n    \n     Resume"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2\n\n\nGregory Ehlinger"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Learn more about Quarto here."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "projects.html#lab-reports",
    "href": "projects.html#lab-reports",
    "title": "Projects",
    "section": "",
    "text": "Learn more about Quarto here."
  },
  {
    "objectID": "projects.html#meeting-notes",
    "href": "projects.html#meeting-notes",
    "title": "Projects",
    "section": "Meeting Notes",
    "text": "Meeting Notes\n\n\n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items\n\n\nLearn more about Quarto here."
  },
  {
    "objectID": "posts/post with code/index.html",
    "href": "posts/post with code/index.html",
    "title": "LeBron James Career Breakdown",
    "section": "",
    "text": "LeBron James Career Breakdown Tableau Dashboard Download\nLeBron James Career Breakdown Dataset Download\n\n\n\nFor this Project, Jenetty Immaraj and I analyzed the first 18 years of LeBron James’s NBA Career. We created a Tableau dashboard to visualize various statistics for each year. Visualizations include profile photo and jerseys, biometrics, statistical averages, shot selection, and geolocation for recorded statistics."
  },
  {
    "objectID": "projects.html#projects",
    "href": "projects.html#projects",
    "title": "Projects",
    "section": "",
    "text": "Learn more about Quarto here."
  },
  {
    "objectID": "posts/census data/index.html",
    "href": "posts/census data/index.html",
    "title": "Texas Census Data",
    "section": "",
    "text": "Census Data Presentation Download\nCensus Data Code Download\nCensus Data Linear Regression Model File Download\n\n\nFor this Project, Jenetty Immaraj and I analyzed the first 18 years of LeBron James’s NBA Career. We created a Tableau dashboard to visualize various statistics for each year. Visualizations include profile photo and jerseys, biometrics, statistical averages, shot selection, and geolocation for recorded statistics."
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html",
    "href": "posts/census data/adta5240_linear_regression.html",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": "",
    "text": "##\n\nLinear Regression: TX Income based on demographics"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#section",
    "href": "posts/census data/adta5240_linear_regression.html#section",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": "",
    "text": "##\n\nLinear Regression: TX Income based on demographics"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#ml-aproach",
    "href": "posts/census data/adta5240_linear_regression.html#ml-aproach",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": "ML Aproach",
    "text": "ML Aproach\n\n\n\naproach.PNG\n\n\n\nImport Libraries\n\nimport pandas and numpy libraries\nimport scatter_matrix from pandas.plotting\nimport LinearRegression from sklearn.linear_model\nimport train_test_split, KFold, and cross_val_score from sklearn.model_selection\nimport matplotlib\nimport seaborn\n\n\nimport pandas as pd\nimport numpy as np\n\nfrom pandas.plotting import scatter_matrix\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nimport matplotlib as mp\nimport matplotlib.pyplot as plt\n\nfrom pandas.plotting import scatter_matrix\nimport seaborn as sns"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#load-data-set",
    "href": "posts/census data/adta5240_linear_regression.html#load-data-set",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": " LOAD DATA SET ",
    "text": "LOAD DATA SET"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#show-top-2-and-bottom-5-rows",
    "href": "posts/census data/adta5240_linear_regression.html#show-top-2-and-bottom-5-rows",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": "2.1 Show top 2 and Bottom 5 rows",
    "text": "2.1 Show top 2 and Bottom 5 rows\n\ndf.head(2)\n\n\n\n\n\n\n\n\nRT\nSERIALNO\nDIVISION\nSPORDER\nPUMA\nREGION\nST\nADJINC\nPWGTP\nAGEP\n...\nPWGTP71\nPWGTP72\nPWGTP73\nPWGTP74\nPWGTP75\nPWGTP76\nPWGTP77\nPWGTP78\nPWGTP79\nPWGTP80\n\n\n\n\n0\nP\n2021GQ0000009\n7\n1\n4615\n3\n48\n1029928\n31\n21\n...\n33\n0\n30\n0\n30\n0\n1\n1\n0\n29\n\n\n1\nP\n2021GQ0000014\n7\n1\n2508\n3\n48\n1029928\n25\n19\n...\n51\n0\n25\n24\n25\n49\n0\n25\n24\n0\n\n\n\n\n2 rows × 287 columns\n\n\n\n\ndf.tail(5)\n\n\n\n\n\n\n\n\nRT\nSERIALNO\nDIVISION\nSPORDER\nPUMA\nREGION\nST\nADJINC\nPWGTP\nAGEP\n...\nPWGTP71\nPWGTP72\nPWGTP73\nPWGTP74\nPWGTP75\nPWGTP76\nPWGTP77\nPWGTP78\nPWGTP79\nPWGTP80\n\n\n\n\n261441\nP\n2021HU1415640\n7\n1\n2322\n3\n48\n1029928\n46\n61\n...\n14\n45\n41\n81\n14\n50\n45\n15\n45\n71\n\n\n261442\nP\n2021HU1415640\n7\n2\n2322\n3\n48\n1029928\n78\n61\n...\n26\n80\n65\n138\n23\n77\n81\n26\n83\n130\n\n\n261443\nP\n2021HU1415668\n7\n1\n4629\n3\n48\n1029928\n248\n44\n...\n245\n242\n249\n429\n76\n406\n225\n71\n73\n429\n\n\n261444\nP\n2021HU1415668\n7\n2\n4629\n3\n48\n1029928\n288\n53\n...\n278\n271\n269\n482\n93\n526\n283\n81\n87\n506\n\n\n261445\nP\n2021HU1415668\n7\n3\n4629\n3\n48\n1029928\n303\n15\n...\n293\n302\n274\n543\n89\n505\n288\n85\n93\n500\n\n\n\n\n5 rows × 287 columns"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#filter-columns",
    "href": "posts/census data/adta5240_linear_regression.html#filter-columns",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": "3. Filter columns",
    "text": "3. Filter columns\n\ndf.columns\n\nIndex(['RT', 'SERIALNO', 'DIVISION', 'SPORDER', 'PUMA', 'REGION', 'ST',\n       'ADJINC', 'PWGTP', 'AGEP',\n       ...\n       'PWGTP71', 'PWGTP72', 'PWGTP73', 'PWGTP74', 'PWGTP75', 'PWGTP76',\n       'PWGTP77', 'PWGTP78', 'PWGTP79', 'PWGTP80'],\n      dtype='object', length=287)\n\n\n\nDescription of selected data fields\n\nST: State Code based on 2010 Census definitions\nAGEP: Age\nCOW: Class of worker\nENG: Ability to speak English\nSCHL: Educational attainment\nSEX: Sex\nWAGP: Wages or salary income past 12 months (use ADJINC to adjust WAGP to constant dollars)\nWKHP: Usual hours worked per week past 12 months\nJWAP: Time of arrival at work - hour and minute\nJWDP: Time of departure for work - hour and minute\nMIGSP: Migration recode - State or foreign country code\nNAICSP: North American Industry Classification System (NAICS) recode for 2018 and later based on 2017 NAICS codes\nNOP: Nativity of parent\nOCCP: Occupation recode for 2018 and later based on 2018 OCC codes\nPERNP: Total person’s earnings (use ADJINC to adjust to constant dollars)\nPINCP: Total person’s income (signed, use ADJINC to adjust to constant dollars)\nPOBP: Place of birth (Recode)\nSCIENGP: Field of Degree Science and Engineering Flag - NSF Definition\nSCIENGRLP: Field of Degree Science and Engineering Related Flag - NSF Definition\nSOCP: Standard Occupational Classification (SOC) codes for 2018 and later based on 2018 SOC codes\nWAOB: World area of birth\nFAGEP: Age allocation flag\nFSEMP: Self employment Flag\nPWGTP: Person’s weight\nRACASN: Asian recode (Asian alone or in combination with one or more other races)\nRACBLK: Black or African American recode (Black alone or in combination with one or more other races)\nRACWHT: White recode (White alone or in combination with one or more other races)\n\n\ndf2 = df[{'MIGSP','NAICSP','NOP','PERNP','PINCP','SCIENGP','SCIENGRLP','SOCP','WAOB','AGEP','SEX',\n          'POBP','COW','RT','ENG','SCHL','WAGP','WKHP','JWAP','JWDP','OCCP','POBP','ST','NATIVITY','FSEMP','PWGTP',\n          'RACASN','RACBLK','RACWHT'}]\n\nC:\\Users\\palom\\AppData\\Local\\Temp\\ipykernel_13200\\3040542100.py:1: FutureWarning: Passing a set as an indexer is deprecated and will raise in a future version. Use a list instead.\n  df2 = df[{'MIGSP','NAICSP','NOP','PERNP','PINCP','SCIENGP','SCIENGRLP','SOCP','WAOB','AGEP','SEX',\n\n\n\ndf2.head(10)\n\n\n\n\n\n\n\n\nST\nRACASN\nPINCP\nJWDP\nPERNP\nWAOB\nSEX\nNATIVITY\nRACWHT\nRACBLK\n...\nWAGP\nRT\nPWGTP\nCOW\nPOBP\nJWAP\nSOCP\nNOP\nOCCP\nFSEMP\n\n\n\n\n0\n48\n0\n7000.0\n118.0\n7000.0\n1\n1\n1\n1\n0\n...\n7000.0\nP\n31\n1.0\n48\n199.0\n353031\nNaN\n4110.0\n0\n\n\n1\n48\n0\n0.0\nNaN\n0.0\n1\n1\n1\n0\n1\n...\n0.0\nP\n25\nNaN\n36\nNaN\nNaN\nNaN\nNaN\n0\n\n\n2\n48\n0\n0.0\nNaN\n0.0\n1\n1\n1\n1\n0\n...\n0.0\nP\n19\n1.0\n48\nNaN\n472211\nNaN\n6520.0\n0\n\n\n3\n48\n0\n13500.0\nNaN\n0.0\n1\n1\n1\n0\n1\n...\n0.0\nP\n12\nNaN\n48\nNaN\nNaN\nNaN\nNaN\n0\n\n\n4\n48\n0\n10800.0\nNaN\n0.0\n1\n1\n1\n1\n0\n...\n0.0\nP\n16\nNaN\n48\nNaN\nNaN\nNaN\nNaN\n0\n\n\n5\n48\n0\n0.0\nNaN\n0.0\n5\n1\n2\n1\n0\n...\n0.0\nP\n56\nNaN\n110\nNaN\nNaN\nNaN\nNaN\n0\n\n\n6\n48\n0\n0.0\nNaN\n0.0\n1\n1\n1\n0\n0\n...\n0.0\nP\n60\nNaN\n48\nNaN\nNaN\nNaN\nNaN\n0\n\n\n7\n48\n0\n0.0\nNaN\n0.0\n1\n1\n1\n1\n0\n...\n0.0\nP\n25\nNaN\n6\nNaN\nNaN\nNaN\nNaN\n0\n\n\n8\n48\n0\n0.0\nNaN\n0.0\n1\n1\n1\n1\n0\n...\n0.0\nP\n8\nNaN\n48\nNaN\nNaN\nNaN\nNaN\n1\n\n\n9\n48\n0\n13000.0\n100.0\n13000.0\n1\n1\n1\n1\n0\n...\n13000.0\nP\n16\n1.0\n48\n162.0\n537065\nNaN\n9645.0\n0\n\n\n\n\n10 rows × 28 columns\n\n\n\n\nprint(df.shape)\n\n(261446, 287)\n\n\n\ndf2.dtypes\n\nST             int64\nRACASN         int64\nPINCP        float64\nJWDP         float64\nPERNP        float64\nWAOB           int64\nSEX            int64\nNATIVITY       int64\nRACWHT         int64\nRACBLK         int64\nSCIENGP      float64\nSCHL         float64\nMIGSP        float64\nNAICSP        object\nAGEP           int64\nSCIENGRLP    float64\nENG          float64\nWKHP         float64\nWAGP         float64\nRT            object\nPWGTP          int64\nCOW          float64\nPOBP           int64\nJWAP         float64\nSOCP          object\nNOP          float64\nOCCP         float64\nFSEMP          int64\ndtype: object"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#clean-the-data",
    "href": "posts/census data/adta5240_linear_regression.html#clean-the-data",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": "1. Clean the data",
    "text": "1. Clean the data\n\nFind and Mark Missing Values\n\n\ndf2.isnull().sum()\n\nST                0\nRACASN            0\nPINCP         45410\nJWDP         166266\nPERNP         48880\nWAOB              0\nSEX               0\nNATIVITY          0\nRACWHT            0\nRACBLK            0\nSCIENGP      197341\nSCHL           7952\nMIGSP        226887\nNAICSP       109139\nAGEP              0\nSCIENGRLP    197341\nENG          186811\nWKHP         131782\nWAGP          45410\nRT                0\nPWGTP             0\nCOW          109139\nPOBP              0\nJWAP         166266\nSOCP         109139\nNOP          208561\nOCCP         109139\nFSEMP             0\ndtype: int64\n\n\n\ndf3 = df2[df2['COW'].notna()]\n\n\ndf4 = df3[df3['WKHP'].notna()]\n\n\ndf4['SCIENGP'] = df4['SCIENGP'].fillna(0)\n\nC:\\Users\\palom\\AppData\\Local\\Temp\\ipykernel_13200\\2680412488.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df4['SCIENGP'] = df4['SCIENGP'].fillna(0)\n\n\n\nprint(df4.shape)\n\n(129664, 28)\n\n\n\ndf4.isnull().sum()\n\nST                0\nRACASN            0\nPINCP             0\nJWDP          34484\nPERNP             0\nWAOB              0\nSEX               0\nNATIVITY          0\nRACWHT            0\nRACBLK            0\nSCIENGP           0\nSCHL              0\nMIGSP        110606\nNAICSP            0\nAGEP              0\nSCIENGRLP     82852\nENG           88670\nWKHP              0\nWAGP              0\nRT                0\nPWGTP             0\nCOW               0\nPOBP              0\nJWAP          34484\nSOCP              0\nNOP          127911\nOCCP              0\nFSEMP             0\ndtype: int64\n\n\n\ndf5 = df4[{'NAICSP','PERNP','PINCP','SOCP','WAOB','AGEP','SEX','SCIENGP',\n          'POBP','COW','RT','SCHL','WAGP','WKHP','OCCP','POBP','FSEMP','RACASN','RACBLK','RACWHT','PWGTP'}]\n\nC:\\Users\\palom\\AppData\\Local\\Temp\\ipykernel_13200\\3447267456.py:1: FutureWarning: Passing a set as an indexer is deprecated and will raise in a future version. Use a list instead.\n  df5 = df4[{'NAICSP','PERNP','PINCP','SOCP','WAOB','AGEP','SEX','SCIENGP',\n\n\n\ndf5.isnull().sum()\n\nRACASN     0\nPINCP      0\nPERNP      0\nWAOB       0\nSEX        0\nRACWHT     0\nRACBLK     0\nSCIENGP    0\nSCHL       0\nNAICSP     0\nAGEP       0\nWKHP       0\nWAGP       0\nRT         0\nPWGTP      0\nCOW        0\nPOBP       0\nSOCP       0\nOCCP       0\nFSEMP      0\ndtype: int64\n\n\n\nprint(df5.shape)\n\n(129664, 20)"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#performing-the-exploratory-data-analysis-eda",
    "href": "posts/census data/adta5240_linear_regression.html#performing-the-exploratory-data-analysis-eda",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": "2. Performing the Exploratory Data Analysis (EDA)",
    "text": "2. Performing the Exploratory Data Analysis (EDA)\n\nPrint a count of the number of rows (observations) and columns (variables)\nPrint the data types of all variables\nPrint a summary statistics of the data\n\n\ndf5.describe()\n\n\n\n\n\n\n\n\nPOBP\nFSEMP\nRACBLK\nOCCP\nPINCP\nAGEP\nRACASN\nWAGP\nSEX\nSCIENGP\nCOW\nPERNP\nWKHP\nSCHL\nRACWHT\nPWGTP\nWAOB\n\n\n\n\ncount\n129664.000000\n129664.000000\n129664.000000\n129664.000000\n1.296640e+05\n129664.000000\n129664.000000\n129664.000000\n129664.000000\n129664.000000\n129664.000000\n129664.000000\n129664.000000\n129664.000000\n129664.000000\n129664.000000\n129664.000000\n\n\nmean\n88.852480\n0.158895\n0.099688\n4103.373118\n6.075186e+04\n42.917101\n0.069402\n52085.459650\n1.465627\n0.584511\n2.102635\n55968.915836\n39.121815\n18.277055\n0.744586\n117.242357\n1.542788\n\n\nstd\n102.200954\n0.365580\n0.299585\n2713.268667\n7.708049e+04\n15.277441\n0.254138\n67908.465601\n0.498819\n0.830562\n1.852596\n71724.136602\n13.094686\n3.875669\n0.436095\n108.011057\n1.150909\n\n\nmin\n1.000000\n0.000000\n0.000000\n10.000000\n-8.400000e+03\n16.000000\n0.000000\n0.000000\n1.000000\n0.000000\n1.000000\n-8400.000000\n1.000000\n1.000000\n0.000000\n1.000000\n1.000000\n\n\n25%\n47.000000\n0.000000\n0.000000\n2025.000000\n2.000000e+04\n30.000000\n0.000000\n13000.000000\n1.000000\n0.000000\n1.000000\n17000.000000\n36.000000\n16.000000\n0.000000\n51.000000\n1.000000\n\n\n50%\n48.000000\n0.000000\n0.000000\n4110.000000\n4.000000e+04\n42.000000\n0.000000\n35000.000000\n1.000000\n0.000000\n1.000000\n37500.000000\n40.000000\n19.000000\n1.000000\n84.000000\n1.000000\n\n\n75%\n48.000000\n0.000000\n0.000000\n5740.000000\n7.200000e+04\n55.000000\n0.000000\n65000.000000\n2.000000\n1.000000\n3.000000\n69000.000000\n43.000000\n21.000000\n1.000000\n145.000000\n1.000000\n\n\nmax\n554.000000\n1.000000\n1.000000\n9830.000000\n1.157000e+06\n92.000000\n1.000000\n489000.000000\n2.000000\n2.000000\n8.000000\n844000.000000\n99.000000\n24.000000\n1.000000\n2471.000000\n8.000000\n\n\n\n\n\n\n\n\ndf5.describe(include='object')\n\n\n\n\n\n\n\n\nNAICSP\nRT\nSOCP\n\n\n\n\ncount\n129664\n129664\n129664\n\n\nunique\n269\n1\n529\n\n\ntop\n23\nP\n1191XX\n\n\nfreq\n10174\n129664\n3697\n\n\n\n\n\n\n\n\ndf5['COW'].value_counts()\n\n1.0    86128\n3.0    10502\n6.0     9707\n2.0     8407\n4.0     5383\n7.0     4742\n5.0     4380\n8.0      415\nName: COW, dtype: int64\n\n\n\ndf5['WKHP'].value_counts()\n\n40.0    61789\n50.0    10865\n45.0     6707\n30.0     5796\n60.0     5507\n        ...  \n71.0        4\n89.0        3\n73.0        3\n93.0        1\n81.0        1\nName: WKHP, Length: 97, dtype: int64\n\n\n\ndf5['SCHL'].value_counts()\n\n21.0    29627\n16.0    25361\n19.0    18732\n22.0    12248\n20.0    10012\n18.0     9155\n17.0     4761\n23.0     2908\n14.0     2819\n1.0      2407\n15.0     2378\n24.0     2029\n13.0     1941\n12.0     1781\n9.0      1328\n11.0      834\n10.0      342\n8.0       318\n6.0       262\n7.0       180\n5.0        98\n4.0        71\n2.0        38\n3.0        34\nName: SCHL, dtype: int64\n\n\n\ndf5['WAOB'].value_counts()\n\n1    102765\n3     15399\n4      7149\n5      2017\n6      1335\n2       541\n7       355\n8       103\nName: WAOB, dtype: int64\n\n\n\ndf5['NAICSP'].value_counts(normalize=True)\n\n23       0.078464\n6111     0.070112\n722Z     0.060649\n622M     0.035793\n611M1    0.027216\n           ...   \n3133     0.000039\n31M      0.000031\n2122     0.000031\n3122     0.000015\n3131     0.000008\nName: NAICSP, Length: 269, dtype: float64"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#density-plot",
    "href": "posts/census data/adta5240_linear_regression.html#density-plot",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": "Density plot",
    "text": "Density plot\n\n#df5.__delitem__('ST')\n\ndf5.plot(kind='density', subplots=True, layout=(9,2), sharex=False, legend=True, fontsize=1, figsize=(12,8)) \nplt.show()"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#linear-regresion",
    "href": "posts/census data/adta5240_linear_regression.html#linear-regresion",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": "LINEAR REGRESION",
    "text": "LINEAR REGRESION\n\nSTEP 1: Separate the Dataset into Input & Output NumPy Arrays\n\nStore the dataframe d2 values into a NumPy array\nSeparate the array into input and output components by slicing\n\n\n#Separate the dependent from the independent variables. \narray = dflr.values\nX = array [:,[0,1,2,3,4,5,7,8,9]]\nY = array [:,6]\n\n\nX.shape\n\n(129664, 9)\n\n\n\n\nSTEP 2: Split into Input/Output Array into Training/Testing Datasets\n\nSplit the dataset into training at 67% and test at 33% with the seed = 7\n\n\n#Selection of records to include in which sub-dataset must be done randomly\n# use the for seed randomization\ntest_size = 0.33\nseed = 7\n# Split the dataset (both input & output) into training/testing datasets\nX_train, X_test, Y_train, Y_test= train_test_split(X,Y, test_size=0.33,\nrandom_state=seed)\nX_train.shape\n\n(86874, 9)"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#train-model",
    "href": "posts/census data/adta5240_linear_regression.html#train-model",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": " TRAIN MODEL ",
    "text": "TRAIN MODEL \n\nSTEP 3: Build and Train the Model\n\nAssign LinearRegression to the model\nTrain the model\nPrint the intercept and coefficients\nPrint the list of the coefficients with their correspondent variable name\n\n\n#Assign LinearRegression to the model\nmodel = LinearRegression()\n\n\n#Train the model\nreg = model.fit(X_train, Y_train)\n\n\n#Print the intercept and coefficients\nprint (\"Intercept:\", reg.intercept_)\nprint (\"Coefficients:\", reg.coef_)\n\nIntercept: -93421.23353624818\nCoefficients: [  1302.61387251 -14080.96350139  19626.06457212  48782.53278423\n    597.31323087  11801.78875007  63193.35845697  15483.08043019\n  46672.8424576 ]\n\n\n\n#Print the list of the coefficients with their correspondent variable name\nnames_2 = ['WKHP','BACHE','AEU','GRADU','AGEP','US','OWNERW','MALE','SALARYW']\ncoeffs_zip = zip(names_2, reg.coef_)\n# Convert iterator into a set\ncoeffs = set(coeffs_zip)\n# Print (coeffs)\nfor coef in coeffs:\n    print (coef, \"\\n\")\n\n('BACHE', -14080.963501386306) \n\n('US', 11801.788750073873) \n\n('SALARYW', 46672.842457602696) \n\n('GRADU', 48782.53278422593) \n\n('WKHP', 1302.6138725146875) \n\n('AGEP', 597.3132308680757) \n\n('OWNERW', 63193.35845697323) \n\n('AEU', 19626.064572124906) \n\n('MALE', 15483.08043018768)"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#score-model",
    "href": "posts/census data/adta5240_linear_regression.html#score-model",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": " SCORE MODEL ",
    "text": "SCORE MODEL"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#step-4-calculate-r-squared",
    "href": "posts/census data/adta5240_linear_regression.html#step-4-calculate-r-squared",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": "STEP 4: Calculate R-Squared",
    "text": "STEP 4: Calculate R-Squared\n\nCalculate the R-Squared\nPrint the score\n\n** Note: The higher the R-squared, the better (0 – 100%). Depending on the model, the best models score above 83%. The R-squared value tells us how well the independent variables predict the dependent variable, which is very low. Think about how you could increase the R-squared. What variables would you use?\n\n#What is this for???\nLinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)\n\nLinearRegression(n_jobs=1, normalize=False)\n\n\n\n#Calculate the R-Squared\nR_squared = model.score(X_test, Y_test)\nprint(\"R-squared: \", R_squared)\n\nR-squared:  0.23681191222626774\n\n\n\nStep 5: Prediction\n\nExecute model prediction\nWe have now trained the model. Let’s use the trained model to predict the “Salary of an individual” WAGP\nWe are using the following predictors:\nWKHP: Works 50 hours a week\nBACHE: has also 0\nAEU: then will be = 0\nGRADU: Let say has and MBA = 1\nAGEP: He is a Male 30 years old\nUS: US citizent = 1\nOWNER: Then will be =0\nMALE: Will be = 1\nSALARYW: Work for a company =1\n\n** Note: The model predicts that the median value of owner-occupied homes in 1000 dollars in the above suburb should be around $24,144.\n\nmodel.predict([[50,0,0,1,30,1,0,1,1]])\n\narray([112369.10143762])\n\n\n\n\nCase 2 prediction:\n\nMale from the US, 30 years old with a graduate degree. Works 50 hr/wk but owner of a business\n\n\nmodel.predict([[50,0,0,1,30,1,1,1,0]])\n\narray([160079.3794644])\n\n\n\n\nCase 3 prediction:\n\nMale from Asia or Europe, 30 years old with a graduate degree. Works 50 hr/wk but owner of a business\n\n\nmodel.predict([[50,0,0,1,30,0,1,1,0]])\n\narray([163760.67114452])\n\n\n\n\nCase 4 prediction:\n\nMale from US, 40 years old with a graduate or bachelor degree. Works 50 hr/wk and is a salary employee.\n\n\nmodel.predict([[50,0,0,0,40,1,0,1,1]])\n\narray([69559.70096207])\n\n\n\n\nCase 5 prediction:\n\nMale from US, 40 years old with a graduate or bachelor degree. Works 50 hr/wk and is a salary employee.\n\n\nmodel.predict([[40,0,0,1,40,0,1,0,1]])"
  },
  {
    "objectID": "posts/census data/adta5240_linear_regression.html#evaluate-models",
    "href": "posts/census data/adta5240_linear_regression.html#evaluate-models",
    "title": "\n 5240 Group 1 - March the 26th, 2023\n\n",
    "section": " EVALUATE MODELS ",
    "text": "EVALUATE MODELS \n\nStep 6: Train & Score Model 2 Using K-Fold Cross Validation Data Split\n\nSpecify the k-size to 10\nFix the random seed to 7\nSplit the entire data set\nObtain the Mean squared error\nTrain the model and run K-fold cross-validation\nPrint results\n\n\n# Evaluate the algorithm\n# Specify the K-size\nnum_folds = 10\n# Fix the random seed\n# must use the same seed value so that the same subsets can be obtained\n# for each time the process is repeated\nseed = 7\n# Split the whole data set into folds\nkfold= KFold(n_splits=num_folds, random_state=seed, shuffle=True)\n# For Linear regression, we can use MSE (mean squared error) value\n# to evaluate the model/algorithm\nscoring = 'neg_mean_squared_error'\n\n\n# Train the model and run K-foLd cross-validation to validate/evaluate the model\nresults = cross_val_score(model, X, Y, cv=kfold, scoring=scoring)\n# Print out the evaluation results\n# Result: the average of all the results obtained from the k-fold crossvalidation\nprint(\"Average of all results from the K-fold Cross-Validation\",end=\"\")\nprint(\",using negative mean squared error:\",results.mean())\n\nAverage of all results from the K-fold Cross-Validation,using negative mean squared error: -3525537755.348807\n\n\n\n\nStep 7: Score Using Explained Variance\nLet’s use a different scoring parameter. Here we use the Explained Variance. The best possible score is 1.0; lower values are worse. - Specify the k-size to 10 - Set the seed to 7 - Split the entire data set - Obtain the explained variance score - Train the model and run K-fold cross-validation - Print results\n\n# Evaluate the algorithm\n# Specify the K-size\nnum_folds = 10\n# Fix the random seed must use the same seed value so that the same subsets\n# can be obtained\n# for each time the process is repeated\nseed = 7\n# Split the whole data set into folds\nkfold= KFold(n_splits=num_folds, random_state=seed, shuffle=True)\n# For Linear regression, we can use explained variance value to evaluate the model/algorithm\nscoring = 'explained_variance'\n\n\n# Train the model and run K-foLd cross-validation to validate/evaluate the model\nresults = cross_val_score(model, X, Y, cv=kfold, scoring=scoring)\n# Print out the evaluation results\n# Result: the average of all the results obtained from the k-fold crossvalidation\nprint(\"Average of all results from the K-fold Cross Validation\",end=\"\")\nprint(\" using exlpained variance:\",results.mean())\n\nAverage of all results from the K-fold Cross Validation using exlpained variance: 0.23548372748977942\n\n\n\nsns.pairplot(df5,x_vars=['AGEP','WKHP'],y_vars=['WAGP'],hue='BACHE',height=4.1,aspect=2.1)\n\n\n\n\n\nfig, ax = plt.subplots(figsize=[15,7])\nsns.heatmap(df5.corr(),annot=True,lw=1,ax=ax)\n\n&lt;AxesSubplot:&gt;\n\n\n\n\n\n\ndf5.loc[df5['WAGP'] &gt; 0   , 'WAGP'] = df5['WAGP']/100000"
  }
]